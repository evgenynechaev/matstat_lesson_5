import numpy as np


def my_mean(in_array: list):
    return sum(in_array) / len(in_array)


def my_var_not_shifted(in_array: list):
    mean = my_mean(in_array)
    return sum(map(lambda x: (x - mean) ** 2, in_array)) / (len(in_array) - 1)


def task_1():
    """
    Задача 1:
        Известно, что генеральная совокупность распределена нормально
        со средним квадратическим отклонением, равным 16.
        Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95,
        если выборочная средняя M = 80, а объем выборки n = 256.
    Решение:
        sigma = 16
        средняя выборки Mсред = 80
        n = 256
        Для надежности 95%
        (1 - 0.95) / 2 = 0.05 / 2 = 0.025
        0.95 + 0.025 = 0.975
        Таблицная величина Z для 0.975 = 1.96
        Вычисляем интервал
        Mсред +- Z * sigma/(n**0.5)
        80 +- 1.96*16/(256**0.5) = 80 +- 1.96
    Ответ:
        Доверительный интервал для оценки математического ожидания a с надежностью 0.95:
        [78.04 ; 81.96]
    """
    sigma = 16
    mean = 80
    n = 256
    z_a2 = 1.96
    delta = z_a2 * sigma / (n ** 0.5)
    x_min = mean - delta
    x_max = mean + delta
    print("Задача 1")
    print(f"    Mсред = {mean}")
    print(f"    sigma = {sigma}")
    print(f"    n = {n}")
    print(f"    Za/2 = {z_a2}")
    print(f"    Доверительный интервал: Mсред +- Za/2 * sigma/(n**0.5)")
    print(f"        или: {mean} +- {z_a2} * {sigma}/({n}**0.5)")
    print(f"    Ответ: доверительный интервал: [{x_min} ; {x_max}]")
    print()


def task_2():
    """
    Задача 2:
        В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью,
        получены опытные данные:
        6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
        Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей,
        оценить истинное значение величины X при помощи доверительного интервала, покрывающего это
        значение с доверительной вероятностью 0,95.
    Решение:
        измерений выборки: n = 10
        среднее значение выборки Xср: 6.59
        не смещенная оценка дисперсии: 0.2032
        среднее квадратичное отклонение: sigma = 0.4508
        табличное значение для доверительного интервала 95% при n = 10: t_a2 = 2.2620
        вычисляем доверительный интервал:
        6.59 +- t_a2 * sigma / (n ** 0.5) = 6.59 +- 2.2620 * 0.4508 / (10 ** 0.5) = 6.59 +- 0.3225
        доверительный интервал: 6.59 +- 0.3225
    Ответ:
        Истинное значение величины X с доверительной вероятностью 0,95 лежит в интервале [6.2675 ; 6.9125]
    """
    print("Задача 2")
    x_list = [6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1]
    n = len(x_list)
    x_mean = my_mean(x_list)
    print(f"    Среднее значение: {x_mean:.4f}")
    disperse = my_var_not_shifted(x_list)
    sigma = disperse ** 0.5
    print(f"    Расчет собственными функциями:")
    print(f"        Не смещенная оценка дисперсии: {disperse:.4f}")
    print(f"        Среднее квадратичное отклонение: {sigma:.4f}")
    print(f"    Проверка при помощи библиотеки numpy:")
    print(f"        Не смещенная оценка дисперсии: {np.var(x_list, ddof = 1):.4f}")
    print(f"        Среднее квадратичное отклонение: {np.std(x_list, ddof = 1):.4f}")
    t_a2 = 2.262  # табличное значение для доверительного интервала 95% при n = 10, alfa = 0.05/2 = 0.025
    print(f"    табличное значение для доверительного интервала 95% при n = {n}: {t_a2:.4f}")
    delta = t_a2 * sigma / (n ** 0.5)
    x_min = x_mean - delta
    x_max = x_mean + delta
    print(f"    Доверительный интервал: Mсред +- Ta/2 * sigma/(n**0.5) = {x_mean:.4f} +- {delta:.4f}")
    print(f"    Ответ:")
    print(f"    Истинное значение величины X с доверительной вероятностью 0,95 "
          f"лежит в интервале [{x_min:.4f} ; {x_max:.4f}]")
    print()


def task_3():
    """
    Задача 3:
        Утверждается, что шарики для подшипников, изготовленные автоматическим станком, имеют средний диаметр 17 мм.
        Используя односторонний критерий с α=0,05, проверить эту гипотезу, если в выборке из n=100 шариков средний
        диаметр оказался равным 17.5 мм, а дисперсия известна и равна 4 кв. мм.
    Решение:
        гипотеза: mu = 17
        выборка: n = 100
        среднее выборки: mean = 17.5
        дисперсия: d = 4
        sigma = d ** 0.5 = 2
        Z выборки = Zn = (mean - mu) / (sigma / (n ** 0.5)) = (17.5 - 17) / (2 / (100 ** 0.5)) = 2.5000
        Z табличное для одностороннего критерия с α=0,05  = 1.645
        Zn=2.5000 выходит за пределы Z=1.6450,
        шарики для подшипников, не имеют средний диаметр 17 мм.
    Ответ:
        Zn=2.5000 больше Z=1.6450, гипотеза не верна.
    """
    print("Задача 3")
    n = 100
    mu = 17
    mean = 17.5
    d = 4
    sigma = d ** 0.5
    z_n = (mean - mu) / (sigma / (n ** 0.5))
    z = 1.645
    print(f"    Утверждается, что шарики для подшипников, имеют средний диаметр 17 мм.")
    print(f"    Для выборки n = {n}, среднее выборки = {mean}, сигма = {sigma}, гипотеза = {mu}")
    print(f"    Z = {z:.4f}, Zn = {z_n:.4f}")
    print(f"    Вывод:")
    if z_n < z:
        print(f"    Zn={z_n:.4f} меньше Z={z:.4f}, гипотеза верна.")
    if z_n > z:
        print(f"    Zn={z_n:.4f} больше Z={z:.4f}, гипотеза не верна.")
    if z_n == z:
        print(f"    Zn={z_n:.4f} равно Z={z:.4f}, требуется дополнительное исследование.")
    print()


def task_4():
    """
    Задача 4:
        Продавец утверждает, что средний вес пачки печенья составляет 200 г.
        Из партии извлечена выборка из 10 пачек. Вес каждой пачки составляет:
        202, 203, 199, 197, 195, 201, 200, 204, 194, 190.
        Известно, что их веса распределены нормально.
        Верно ли утверждение продавца, если учитывать, что доверительная вероятность равна 99%?
    Решение
        Размер выборки: n = 10
        Среднее значение выборки: x_mean = 198.5
        Т.к. среднее квадратическим отклонение генеральной совокупности неизвестно,
        используем таблицу Стьюдента для определения коэффициента
        табличное значение для доверительного интервала 99% при n = 10 и alfa = 0.01/2 = 0.005:
        t_a2 = 3.250
        Среднее квадратичное отклонение выборки: sigma = 4.4535

    Решение при помощи проверки гипотезы:
        mu = 200
        t_n = (x_mean - mu) / (sigma / (n ** 0.5)) = (198.5 - 200) / (4.4535 / (10 ** 0.5)) = -1.0651
        Значение t_n=-1.0651 находится в интервале [-3.250 ; +3.250]
        Следовательно верна гипотеза H0.

    Решение через доверительный интервал:
        табличное значение для доверительного интервала 99% при n = 10: 3.2500
        Вычисляем доверительный интервал:
        x_mean +- t_a2 * sigma / (n ** 0.5) = 198.5 += 4.5770
        доверительный интервал: [193.9230 ; 203.0770]
        Значение среднего веса пачки 200г попадает в доверительный интервал [193.9230 - 203.0770]
    Ответ:
        Утверждение продавца верно.
    """
    print("Задача 4")
    mu = 200
    x_list = [202, 203, 199, 197, 195, 201, 200, 204, 194, 190]
    n = len(x_list)
    x_mean = my_mean(x_list)
    disperse = my_var_not_shifted(x_list)
    sigma = disperse ** 0.5
    print(f"    Размер выборки: {n}")
    print(f"    Среднее значение выборки: {x_mean:.4f}")
    print(f"    Расчет собственными функциями:")
    print(f"        Не смещенная оценка дисперсии: {disperse:.4f}")
    print(f"        Среднее квадратичное отклонение: {sigma:.4f}")
    print(f"    Проверка при помощи библиотеки numpy:")
    print(f"        Не смещенная оценка дисперсии: {np.var(x_list, ddof = 1):.4f}")
    print(f"        Среднее квадратичное отклонение: {np.std(x_list, ddof = 1):.4f}")
    t_a2_max: float = 3.250  # табличное значение для доверительного интервала 99% при n = 10, alfa = 0.01/2 = 0.005
    t_a2_min = -1 * t_a2_max
    print(f"    табличное значение для доверительного интервала 99% при n = {n}: {t_a2_max:.4f}")
    print()
    print(f"    Решение при помощи гипотезы:")
    t_n = abs(x_mean - mu) / (sigma / (n ** 0.5))
    print(f"        t_n = {t_n:.4f}, t_a2 = {t_a2_max:.4f}")
    if t_a2_min < t_n < t_a2_max:
        print(f"    Вывод:")
        print(f"    Tn={t_n:.4f} находится в интервале [{t_a2_min:.4f} ; +{t_a2_max:.4f}], гипотеза верна.")
    if t_n > t_a2_max or t_n < t_a2_min:
        print(f"    Вывод:")
        print(f"    Tn={t_n:.4f} выходит за интервал [{t_a2_min:.4f} ; +{t_a2_max:.4f}], гипотеза не верна.")
    if t_n == t_a2_max or t_n == t_a2_min:
        print(f"    Вывод:")
        print(f"    Tn={t_n:.4f} находится на границе интервала[{t_a2_min:.4f} ; +{t_a2_max:.4f}], "
              f"требуется дополнительное исследование.")
    print()

    print(f"    Решение при помощи доверительного интервала:")
    delta = t_a2_max * sigma / (n ** 0.5)
    print(f"        delta: {delta:.4f}")
    x_min = x_mean - delta
    x_max = x_mean + delta
    print(f"        доверительный интервал: [{x_min:.4f} ; {x_max:.4f}]")
    if (mu > x_min) & (mu < x_max):
        print(f"    Значение среднего веса пачки {mu}г попадает в доверительный интервал [{x_min:.4f}-{x_max:.4f}]")
        print(f"    Вывод:")
        print(f"    Утверждение продавца верно.")
    else:
        print(f"    Значение среднего веса пачки {mu}г не попадает в доверительный интервал [{x_min:.4f}-{x_max:.4f}]")
        print(f"    Вывод:")
        print(f"    Утверждение продавца не верно.")
    print()


task_1()
task_2()
task_3()
task_4()
